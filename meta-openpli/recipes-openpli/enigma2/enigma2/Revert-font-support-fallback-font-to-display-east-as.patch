
This reverts commit ac0d34146f76cdfdb9363e6780424fd284743b68.
---
 data/fonts/Makefile.am      |   7 +------
 data/fonts/wqy-microhei.ttc | Bin 5177387 -> 0 bytes
 lib/gdi/font.cpp            |  36 +++++-------------------------------
 lib/gdi/font.h              |  10 +++-------
 skin.py                     |   5 -----
 5 files changed, 9 insertions(+), 49 deletions(-)
 delete mode 100644 data/fonts/wqy-microhei.ttc

diff --git a/data/fonts/Makefile.am b/data/fonts/Makefile.am
index 395407421..268c5f698 100644
--- a/data/fonts/Makefile.am
+++ b/data/fonts/Makefile.am
@@ -14,9 +14,4 @@ dist_install_DATA = \
 	LiberationSans-Bold.ttf \
 	LiberationSans-BoldItalic.ttf \
 	LiberationSans-Italic.ttf \
-	LiberationSans-Regular.ttf \
-	wqy-microhei.ttc
-
-install-data-hook:
-	cd $(DESTDIR)$(datadir)/fonts && \
-	$(LN_S) wqy-microhei.ttc fallback.font
+	LiberationSans-Regular.ttf
diff --git a/lib/gdi/font.cpp b/lib/gdi/font.cpp
index b4c6b7a93..c06e7150e 100644
--- a/lib/gdi/font.cpp
+++ b/lib/gdi/font.cpp
@@ -278,11 +278,8 @@ int fontRenderClass::getFont(ePtr<Font> &font, const std::string &face, int size
 void addFont(const char *filename, const char *alias, int scale_factor, int is_replacement, int renderflags)
 {
 	fontRenderClass::getInstance()->AddFont(filename, alias, scale_factor, renderflags);
-	if (is_replacement == 1)
+	if (is_replacement)
 		eTextPara::setReplacementFont(alias);
-	else if (is_replacement == -1)
-		eTextPara::setFallbackFont(alias);
-
 }
 
 DEFINE_REF(Font);
@@ -558,26 +555,23 @@ eTextPara::~eTextPara()
 
 void eTextPara::setFont(const gFont *font)
 {
-	ePtr<Font> fnt, replacement, fallback;
+	ePtr<Font> fnt, replacement;
 	fontRenderClass::getInstance()->getFont(fnt, font->family.c_str(), font->pointSize);
 	if (!fnt)
 		eWarning("[eTextPara] FONT '%s' MISSING!", font->family.c_str());
 	fontRenderClass::getInstance()->getFont(replacement, replacement_facename.c_str(), font->pointSize);
-	fontRenderClass::getInstance()->getFont(fallback, fallback_facename.c_str(), font->pointSize);
-	setFont(fnt, replacement, fallback);
+	setFont(fnt, replacement);
 }
 
 std::string eTextPara::replacement_facename;
-std::string eTextPara::fallback_facename;
 std::set<int> eTextPara::forced_replaces;
 
-void eTextPara::setFont(Font *fnt, Font *replacement, Font *fallback)
+void eTextPara::setFont(Font *fnt, Font *replacement)
 {
 	if (!fnt)
 		return;
 	current_font=fnt;
 	replacement_font=replacement;
-	fallback_font=fallback;
 	singleLock s(ftlock);
 
 			// we ask for replacment_font first becauseof the cache
@@ -607,19 +601,6 @@ void eTextPara::setFont(Font *fnt, Font *replacement, Font *fallback)
 			return;
 		}
 	}
-	if (fallback_font)
-	{
-		if ((FTC_Manager_LookupFace(fontRenderClass::instance->cacheManager,
-					    fallback_font->scaler.face_id,
-					    &fallback_face) < 0) ||
-		    (FTC_Manager_LookupSize(fontRenderClass::instance->cacheManager,
-					    &fallback_font->scaler,
-					    &fallback_font->size) < 0))
-		{
-			eDebug("[eTextPara] FTC_Manager_Lookup_Size failed!");
-			return;
-		}
-	}
 	previous=0;
 	use_kerning=FT_HAS_KERNING(current_face);
 }
@@ -856,14 +837,7 @@ nprint:				isprintable=0;
 					index=(rflags&RS_DIRECT)? chr : FT_Get_Char_Index(replacement_face, chr);
 
 				if (!index)
-				{
-					if (fallback_face)
-						index=(rflags&RS_DIRECT)? chr : FT_Get_Char_Index(fallback_face, chr);
-					if (!index)
-						eDebug("[eTextPara] unicode U+%4lx not present", chr);
-					else
-						appendGlyph(fallback_font, fallback_face, index, flags, rflags, border, i == uc_visual.end() - 1, activate_newcolor, newcolor);
-				}
+					eDebug("[eTextPara] unicode U+%4lx not present", chr);
 				else
 					appendGlyph(replacement_font, replacement_face, index, flags, rflags, border, i == uc_visual.end() - 1, activate_newcolor, newcolor);
 			} else
diff --git a/lib/gdi/font.h b/lib/gdi/font.h
index e873f9554..ef3ec1d4f 100644
--- a/lib/gdi/font.h
+++ b/lib/gdi/font.h
@@ -124,12 +124,11 @@ class eLCD;
 class eTextPara: public iObject
 {
 	DECLARE_REF(eTextPara);
-	ePtr<Font> current_font, replacement_font, fallback_font;
-	FT_Face current_face, replacement_face, fallback_face;
+	ePtr<Font> current_font, replacement_font;
+	FT_Face current_face, replacement_face;
 	int use_kerning;
 	int previous;
 	static std::string replacement_facename;
-	static std::string fallback_facename;
 	static std::set<int> forced_replaces;
 
 	eRect area;
@@ -148,12 +147,11 @@ class eTextPara: public iObject
 	int appendGlyph(Font *current_font, FT_Face current_face, FT_UInt glyphIndex, int flags, int rflags, int border, bool last,
 			bool activate_newcolor, unsigned long newcolor);
 	void newLine(int flags);
-	void setFont(Font *font, Font *replacement_font, Font *fallback_font);
+	void setFont(Font *font, Font *replacement_font);
 	void calc_bbox();
 public:
 	eTextPara(eRect area, ePoint start=ePoint(-1, -1))
 		: current_font(0), replacement_font(0), current_face(0), replacement_face(0),
-		fallback_font(0), fallback_face(0),
 		area(area), cursor(start), maximum(0, 0), left(start.x()), charCount(0), totalheight(0),
 		bboxValid(0), doTopBottomReordering(false)
 	{
@@ -163,8 +161,6 @@ public:
 	static void setReplacementFont(std::string font) { replacement_facename=font; }
 	static void forceReplacementGlyph(int unicode) { forced_replaces.insert(unicode); }
 
-	static void setFallbackFont(std::string font) { fallback_facename=font; }
-
 	void setFont(const gFont *font);
 	int renderString(const char *string, int flags=0, int border=0);
 
diff --git a/skin.py b/skin.py
index 3b21eae8d..3b9d0df3f 100644
--- a/skin.py
+++ b/skin.py
@@ -599,11 +599,6 @@ def loadSingleSkinData(desktop, skin, path_prefix):
 					resolved_font = skin_path
 			addFont(resolved_font, name, scale, is_replacement, render)
 			#print "Font: ", resolved_font, name, scale, is_replacement
-
-		fallbackFont = resolveFilename(SCOPE_FONTS, "fallback.font", path_prefix=path_prefix)
-		if fileExists(fallbackFont):
-			addFont(fallbackFont, "Fallback", 100, -1, 0)
-
 		for alias in c.findall("alias"):
 			get = alias.attrib.get
 			try:
-- 
2.19.1
